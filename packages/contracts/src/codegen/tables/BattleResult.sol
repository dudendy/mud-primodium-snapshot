// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_OFFCHAIN_TABLE, bytes14(""), bytes16("BattleResult")))
);
ResourceId constant BattleResultTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x00c0060420202020202000000000000000000000000000000000000000000000
);

struct BattleResultData {
  bytes32 attacker;
  bytes32 defender;
  bytes32 winner;
  bytes32 rock;
  uint256 totalCargo;
  uint256 timestamp;
  uint256[] attackerStartingUnits;
  uint256[] defenderStartingUnits;
  uint256[] attackerUnitsLeft;
  uint256[] defenderUnitsLeft;
}

library BattleResult {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](10);
    _valueSchema[0] = SchemaType.BYTES32;
    _valueSchema[1] = SchemaType.BYTES32;
    _valueSchema[2] = SchemaType.BYTES32;
    _valueSchema[3] = SchemaType.BYTES32;
    _valueSchema[4] = SchemaType.UINT256;
    _valueSchema[5] = SchemaType.UINT256;
    _valueSchema[6] = SchemaType.UINT256_ARRAY;
    _valueSchema[7] = SchemaType.UINT256_ARRAY;
    _valueSchema[8] = SchemaType.UINT256_ARRAY;
    _valueSchema[9] = SchemaType.UINT256_ARRAY;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "entity";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](10);
    fieldNames[0] = "attacker";
    fieldNames[1] = "defender";
    fieldNames[2] = "winner";
    fieldNames[3] = "rock";
    fieldNames[4] = "totalCargo";
    fieldNames[5] = "timestamp";
    fieldNames[6] = "attackerStartingUnits";
    fieldNames[7] = "defenderStartingUnits";
    fieldNames[8] = "attackerUnitsLeft";
    fieldNames[9] = "defenderUnitsLeft";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Set attacker.
   */
  function setAttacker(bytes32 entity, bytes32 attacker) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((attacker)), _fieldLayout);
  }

  /**
   * @notice Set attacker.
   */
  function _setAttacker(bytes32 entity, bytes32 attacker) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((attacker)), _fieldLayout);
  }

  /**
   * @notice Set defender.
   */
  function setDefender(bytes32 entity, bytes32 defender) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((defender)), _fieldLayout);
  }

  /**
   * @notice Set defender.
   */
  function _setDefender(bytes32 entity, bytes32 defender) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((defender)), _fieldLayout);
  }

  /**
   * @notice Set winner.
   */
  function setWinner(bytes32 entity, bytes32 winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((winner)), _fieldLayout);
  }

  /**
   * @notice Set winner.
   */
  function _setWinner(bytes32 entity, bytes32 winner) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((winner)), _fieldLayout);
  }

  /**
   * @notice Set rock.
   */
  function setRock(bytes32 entity, bytes32 rock) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((rock)), _fieldLayout);
  }

  /**
   * @notice Set rock.
   */
  function _setRock(bytes32 entity, bytes32 rock) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((rock)), _fieldLayout);
  }

  /**
   * @notice Set totalCargo.
   */
  function setTotalCargo(bytes32 entity, uint256 totalCargo) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((totalCargo)), _fieldLayout);
  }

  /**
   * @notice Set totalCargo.
   */
  function _setTotalCargo(bytes32 entity, uint256 totalCargo) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((totalCargo)), _fieldLayout);
  }

  /**
   * @notice Set timestamp.
   */
  function setTimestamp(bytes32 entity, uint256 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Set timestamp.
   */
  function _setTimestamp(bytes32 entity, uint256 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 entity,
    bytes32 attacker,
    bytes32 defender,
    bytes32 winner,
    bytes32 rock,
    uint256 totalCargo,
    uint256 timestamp,
    uint256[] memory attackerStartingUnits,
    uint256[] memory defenderStartingUnits,
    uint256[] memory attackerUnitsLeft,
    uint256[] memory defenderUnitsLeft
  ) internal {
    bytes memory _staticData = encodeStatic(attacker, defender, winner, rock, totalCargo, timestamp);

    PackedCounter _encodedLengths = encodeLengths(
      attackerStartingUnits,
      defenderStartingUnits,
      attackerUnitsLeft,
      defenderUnitsLeft
    );
    bytes memory _dynamicData = encodeDynamic(
      attackerStartingUnits,
      defenderStartingUnits,
      attackerUnitsLeft,
      defenderUnitsLeft
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 entity,
    bytes32 attacker,
    bytes32 defender,
    bytes32 winner,
    bytes32 rock,
    uint256 totalCargo,
    uint256 timestamp,
    uint256[] memory attackerStartingUnits,
    uint256[] memory defenderStartingUnits,
    uint256[] memory attackerUnitsLeft,
    uint256[] memory defenderUnitsLeft
  ) internal {
    bytes memory _staticData = encodeStatic(attacker, defender, winner, rock, totalCargo, timestamp);

    PackedCounter _encodedLengths = encodeLengths(
      attackerStartingUnits,
      defenderStartingUnits,
      attackerUnitsLeft,
      defenderUnitsLeft
    );
    bytes memory _dynamicData = encodeDynamic(
      attackerStartingUnits,
      defenderStartingUnits,
      attackerUnitsLeft,
      defenderUnitsLeft
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 entity, BattleResultData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.attacker,
      _table.defender,
      _table.winner,
      _table.rock,
      _table.totalCargo,
      _table.timestamp
    );

    PackedCounter _encodedLengths = encodeLengths(
      _table.attackerStartingUnits,
      _table.defenderStartingUnits,
      _table.attackerUnitsLeft,
      _table.defenderUnitsLeft
    );
    bytes memory _dynamicData = encodeDynamic(
      _table.attackerStartingUnits,
      _table.defenderStartingUnits,
      _table.attackerUnitsLeft,
      _table.defenderUnitsLeft
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 entity, BattleResultData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.attacker,
      _table.defender,
      _table.winner,
      _table.rock,
      _table.totalCargo,
      _table.timestamp
    );

    PackedCounter _encodedLengths = encodeLengths(
      _table.attackerStartingUnits,
      _table.defenderStartingUnits,
      _table.attackerUnitsLeft,
      _table.defenderUnitsLeft
    );
    bytes memory _dynamicData = encodeDynamic(
      _table.attackerStartingUnits,
      _table.defenderStartingUnits,
      _table.attackerUnitsLeft,
      _table.defenderUnitsLeft
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (bytes32 attacker, bytes32 defender, bytes32 winner, bytes32 rock, uint256 totalCargo, uint256 timestamp)
  {
    attacker = (Bytes.slice32(_blob, 0));

    defender = (Bytes.slice32(_blob, 32));

    winner = (Bytes.slice32(_blob, 64));

    rock = (Bytes.slice32(_blob, 96));

    totalCargo = (uint256(Bytes.slice32(_blob, 128)));

    timestamp = (uint256(Bytes.slice32(_blob, 160)));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    PackedCounter _encodedLengths,
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint256[] memory attackerStartingUnits,
      uint256[] memory defenderStartingUnits,
      uint256[] memory attackerUnitsLeft,
      uint256[] memory defenderUnitsLeft
    )
  {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    attackerStartingUnits = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    defenderStartingUnits = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(2);
    }
    attackerUnitsLeft = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(3);
    }
    defenderUnitsLeft = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    PackedCounter _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (BattleResultData memory _table) {
    (_table.attacker, _table.defender, _table.winner, _table.rock, _table.totalCargo, _table.timestamp) = decodeStatic(
      _staticData
    );

    (
      _table.attackerStartingUnits,
      _table.defenderStartingUnits,
      _table.attackerUnitsLeft,
      _table.defenderUnitsLeft
    ) = decodeDynamic(_encodedLengths, _dynamicData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 entity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 entity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    bytes32 attacker,
    bytes32 defender,
    bytes32 winner,
    bytes32 rock,
    uint256 totalCargo,
    uint256 timestamp
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(attacker, defender, winner, rock, totalCargo, timestamp);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    uint256[] memory attackerStartingUnits,
    uint256[] memory defenderStartingUnits,
    uint256[] memory attackerUnitsLeft,
    uint256[] memory defenderUnitsLeft
  ) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(
        attackerStartingUnits.length * 32,
        defenderStartingUnits.length * 32,
        attackerUnitsLeft.length * 32,
        defenderUnitsLeft.length * 32
      );
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    uint256[] memory attackerStartingUnits,
    uint256[] memory defenderStartingUnits,
    uint256[] memory attackerUnitsLeft,
    uint256[] memory defenderUnitsLeft
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        EncodeArray.encode((attackerStartingUnits)),
        EncodeArray.encode((defenderStartingUnits)),
        EncodeArray.encode((attackerUnitsLeft)),
        EncodeArray.encode((defenderUnitsLeft))
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bytes32 attacker,
    bytes32 defender,
    bytes32 winner,
    bytes32 rock,
    uint256 totalCargo,
    uint256 timestamp,
    uint256[] memory attackerStartingUnits,
    uint256[] memory defenderStartingUnits,
    uint256[] memory attackerUnitsLeft,
    uint256[] memory defenderUnitsLeft
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(attacker, defender, winner, rock, totalCargo, timestamp);

    PackedCounter _encodedLengths = encodeLengths(
      attackerStartingUnits,
      defenderStartingUnits,
      attackerUnitsLeft,
      defenderUnitsLeft
    );
    bytes memory _dynamicData = encodeDynamic(
      attackerStartingUnits,
      defenderStartingUnits,
      attackerUnitsLeft,
      defenderUnitsLeft
    );

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 entity) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = entity;

    return _keyTuple;
  }
}
