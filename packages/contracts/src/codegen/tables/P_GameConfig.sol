// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("P_GameConfig")))
);
ResourceId constant P_GameConfigTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x00f4080014202020202020200000000000000000000000000000000000000000
);

struct P_GameConfigData {
  address admin;
  uint256 unitProductionRate;
  uint256 maxMotherlodesPerAsteroid;
  uint256 motherlodeChanceInv;
  uint256 motherlodeDistance;
  uint256 travelTime;
  uint256 worldSpeed;
  uint256 tax;
}

library P_GameConfig {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](0);

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](8);
    _valueSchema[0] = SchemaType.ADDRESS;
    _valueSchema[1] = SchemaType.UINT256;
    _valueSchema[2] = SchemaType.UINT256;
    _valueSchema[3] = SchemaType.UINT256;
    _valueSchema[4] = SchemaType.UINT256;
    _valueSchema[5] = SchemaType.UINT256;
    _valueSchema[6] = SchemaType.UINT256;
    _valueSchema[7] = SchemaType.UINT256;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](0);
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](8);
    fieldNames[0] = "admin";
    fieldNames[1] = "unitProductionRate";
    fieldNames[2] = "maxMotherlodesPerAsteroid";
    fieldNames[3] = "motherlodeChanceInv";
    fieldNames[4] = "motherlodeDistance";
    fieldNames[5] = "travelTime";
    fieldNames[6] = "worldSpeed";
    fieldNames[7] = "tax";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get admin.
   */
  function getAdmin() internal view returns (address admin) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Get admin.
   */
  function _getAdmin() internal view returns (address admin) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (address(bytes20(_blob)));
  }

  /**
   * @notice Set admin.
   */
  function setAdmin(address admin) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((admin)), _fieldLayout);
  }

  /**
   * @notice Set admin.
   */
  function _setAdmin(address admin) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((admin)), _fieldLayout);
  }

  /**
   * @notice Get unitProductionRate.
   */
  function getUnitProductionRate() internal view returns (uint256 unitProductionRate) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get unitProductionRate.
   */
  function _getUnitProductionRate() internal view returns (uint256 unitProductionRate) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set unitProductionRate.
   */
  function setUnitProductionRate(uint256 unitProductionRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((unitProductionRate)), _fieldLayout);
  }

  /**
   * @notice Set unitProductionRate.
   */
  function _setUnitProductionRate(uint256 unitProductionRate) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((unitProductionRate)), _fieldLayout);
  }

  /**
   * @notice Get maxMotherlodesPerAsteroid.
   */
  function getMaxMotherlodesPerAsteroid() internal view returns (uint256 maxMotherlodesPerAsteroid) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get maxMotherlodesPerAsteroid.
   */
  function _getMaxMotherlodesPerAsteroid() internal view returns (uint256 maxMotherlodesPerAsteroid) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set maxMotherlodesPerAsteroid.
   */
  function setMaxMotherlodesPerAsteroid(uint256 maxMotherlodesPerAsteroid) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((maxMotherlodesPerAsteroid)), _fieldLayout);
  }

  /**
   * @notice Set maxMotherlodesPerAsteroid.
   */
  function _setMaxMotherlodesPerAsteroid(uint256 maxMotherlodesPerAsteroid) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((maxMotherlodesPerAsteroid)), _fieldLayout);
  }

  /**
   * @notice Get motherlodeChanceInv.
   */
  function getMotherlodeChanceInv() internal view returns (uint256 motherlodeChanceInv) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get motherlodeChanceInv.
   */
  function _getMotherlodeChanceInv() internal view returns (uint256 motherlodeChanceInv) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set motherlodeChanceInv.
   */
  function setMotherlodeChanceInv(uint256 motherlodeChanceInv) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((motherlodeChanceInv)), _fieldLayout);
  }

  /**
   * @notice Set motherlodeChanceInv.
   */
  function _setMotherlodeChanceInv(uint256 motherlodeChanceInv) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((motherlodeChanceInv)), _fieldLayout);
  }

  /**
   * @notice Get motherlodeDistance.
   */
  function getMotherlodeDistance() internal view returns (uint256 motherlodeDistance) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get motherlodeDistance.
   */
  function _getMotherlodeDistance() internal view returns (uint256 motherlodeDistance) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 4, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set motherlodeDistance.
   */
  function setMotherlodeDistance(uint256 motherlodeDistance) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((motherlodeDistance)), _fieldLayout);
  }

  /**
   * @notice Set motherlodeDistance.
   */
  function _setMotherlodeDistance(uint256 motherlodeDistance) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 4, abi.encodePacked((motherlodeDistance)), _fieldLayout);
  }

  /**
   * @notice Get travelTime.
   */
  function getTravelTime() internal view returns (uint256 travelTime) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get travelTime.
   */
  function _getTravelTime() internal view returns (uint256 travelTime) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 5, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set travelTime.
   */
  function setTravelTime(uint256 travelTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((travelTime)), _fieldLayout);
  }

  /**
   * @notice Set travelTime.
   */
  function _setTravelTime(uint256 travelTime) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 5, abi.encodePacked((travelTime)), _fieldLayout);
  }

  /**
   * @notice Get worldSpeed.
   */
  function getWorldSpeed() internal view returns (uint256 worldSpeed) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get worldSpeed.
   */
  function _getWorldSpeed() internal view returns (uint256 worldSpeed) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 6, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set worldSpeed.
   */
  function setWorldSpeed(uint256 worldSpeed) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((worldSpeed)), _fieldLayout);
  }

  /**
   * @notice Set worldSpeed.
   */
  function _setWorldSpeed(uint256 worldSpeed) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 6, abi.encodePacked((worldSpeed)), _fieldLayout);
  }

  /**
   * @notice Get tax.
   */
  function getTax() internal view returns (uint256 tax) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get tax.
   */
  function _getTax() internal view returns (uint256 tax) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 7, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set tax.
   */
  function setTax(uint256 tax) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((tax)), _fieldLayout);
  }

  /**
   * @notice Set tax.
   */
  function _setTax(uint256 tax) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setStaticField(_tableId, _keyTuple, 7, abi.encodePacked((tax)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get() internal view returns (P_GameConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get() internal view returns (P_GameConfigData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    address admin,
    uint256 unitProductionRate,
    uint256 maxMotherlodesPerAsteroid,
    uint256 motherlodeChanceInv,
    uint256 motherlodeDistance,
    uint256 travelTime,
    uint256 worldSpeed,
    uint256 tax
  ) internal {
    bytes memory _staticData = encodeStatic(
      admin,
      unitProductionRate,
      maxMotherlodesPerAsteroid,
      motherlodeChanceInv,
      motherlodeDistance,
      travelTime,
      worldSpeed,
      tax
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    address admin,
    uint256 unitProductionRate,
    uint256 maxMotherlodesPerAsteroid,
    uint256 motherlodeChanceInv,
    uint256 motherlodeDistance,
    uint256 travelTime,
    uint256 worldSpeed,
    uint256 tax
  ) internal {
    bytes memory _staticData = encodeStatic(
      admin,
      unitProductionRate,
      maxMotherlodesPerAsteroid,
      motherlodeChanceInv,
      motherlodeDistance,
      travelTime,
      worldSpeed,
      tax
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(P_GameConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.admin,
      _table.unitProductionRate,
      _table.maxMotherlodesPerAsteroid,
      _table.motherlodeChanceInv,
      _table.motherlodeDistance,
      _table.travelTime,
      _table.worldSpeed,
      _table.tax
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(P_GameConfigData memory _table) internal {
    bytes memory _staticData = encodeStatic(
      _table.admin,
      _table.unitProductionRate,
      _table.maxMotherlodesPerAsteroid,
      _table.motherlodeChanceInv,
      _table.motherlodeDistance,
      _table.travelTime,
      _table.worldSpeed,
      _table.tax
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  )
    internal
    pure
    returns (
      address admin,
      uint256 unitProductionRate,
      uint256 maxMotherlodesPerAsteroid,
      uint256 motherlodeChanceInv,
      uint256 motherlodeDistance,
      uint256 travelTime,
      uint256 worldSpeed,
      uint256 tax
    )
  {
    admin = (address(Bytes.slice20(_blob, 0)));

    unitProductionRate = (uint256(Bytes.slice32(_blob, 20)));

    maxMotherlodesPerAsteroid = (uint256(Bytes.slice32(_blob, 52)));

    motherlodeChanceInv = (uint256(Bytes.slice32(_blob, 84)));

    motherlodeDistance = (uint256(Bytes.slice32(_blob, 116)));

    travelTime = (uint256(Bytes.slice32(_blob, 148)));

    worldSpeed = (uint256(Bytes.slice32(_blob, 180)));

    tax = (uint256(Bytes.slice32(_blob, 212)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    PackedCounter,
    bytes memory
  ) internal pure returns (P_GameConfigData memory _table) {
    (
      _table.admin,
      _table.unitProductionRate,
      _table.maxMotherlodesPerAsteroid,
      _table.motherlodeChanceInv,
      _table.motherlodeDistance,
      _table.travelTime,
      _table.worldSpeed,
      _table.tax
    ) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    address admin,
    uint256 unitProductionRate,
    uint256 maxMotherlodesPerAsteroid,
    uint256 motherlodeChanceInv,
    uint256 motherlodeDistance,
    uint256 travelTime,
    uint256 worldSpeed,
    uint256 tax
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        admin,
        unitProductionRate,
        maxMotherlodesPerAsteroid,
        motherlodeChanceInv,
        motherlodeDistance,
        travelTime,
        worldSpeed,
        tax
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    address admin,
    uint256 unitProductionRate,
    uint256 maxMotherlodesPerAsteroid,
    uint256 motherlodeChanceInv,
    uint256 motherlodeDistance,
    uint256 travelTime,
    uint256 worldSpeed,
    uint256 tax
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(
      admin,
      unitProductionRate,
      maxMotherlodesPerAsteroid,
      motherlodeChanceInv,
      motherlodeDistance,
      travelTime,
      worldSpeed,
      tax
    );

    PackedCounter _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple() internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    return _keyTuple;
  }
}
