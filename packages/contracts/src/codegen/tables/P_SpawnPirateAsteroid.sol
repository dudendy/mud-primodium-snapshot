// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol";

ResourceId constant _tableId = ResourceId.wrap(
  bytes32(abi.encodePacked(RESOURCE_TABLE, bytes14(""), bytes16("P_SpawnPirateAst")))
);
ResourceId constant P_SpawnPirateAsteroidTableId = _tableId;

FieldLayout constant _fieldLayout = FieldLayout.wrap(
  0x0008020404040000000000000000000000000000000000000000000000000000
);

struct P_SpawnPirateAsteroidData {
  int32 x;
  int32 y;
  uint8[] resources;
  uint256[] resourceAmounts;
  bytes32[] units;
  uint256[] unitAmounts;
}

library P_SpawnPirateAsteroid {
  /**
   * @notice Get the table values' field layout.
   * @return _fieldLayout The field layout for the table.
   */
  function getFieldLayout() internal pure returns (FieldLayout) {
    return _fieldLayout;
  }

  /**
   * @notice Get the table's key schema.
   * @return _keySchema The key schema for the table.
   */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _keySchema = new SchemaType[](1);
    _keySchema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_keySchema);
  }

  /**
   * @notice Get the table's value schema.
   * @return _valueSchema The value schema for the table.
   */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _valueSchema = new SchemaType[](6);
    _valueSchema[0] = SchemaType.INT32;
    _valueSchema[1] = SchemaType.INT32;
    _valueSchema[2] = SchemaType.UINT8_ARRAY;
    _valueSchema[3] = SchemaType.UINT256_ARRAY;
    _valueSchema[4] = SchemaType.BYTES32_ARRAY;
    _valueSchema[5] = SchemaType.UINT256_ARRAY;

    return SchemaLib.encode(_valueSchema);
  }

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "prototype";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](6);
    fieldNames[0] = "x";
    fieldNames[1] = "y";
    fieldNames[2] = "resources";
    fieldNames[3] = "resourceAmounts";
    fieldNames[4] = "units";
    fieldNames[5] = "unitAmounts";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get x.
   */
  function getX(bytes32 prototype) internal view returns (int32 x) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get x.
   */
  function _getX(bytes32 prototype) internal view returns (int32 x) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set x.
   */
  function setX(bytes32 prototype, int32 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((x)), _fieldLayout);
  }

  /**
   * @notice Set x.
   */
  function _setX(bytes32 prototype, int32 x) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((x)), _fieldLayout);
  }

  /**
   * @notice Get y.
   */
  function getY(bytes32 prototype) internal view returns (int32 y) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Get y.
   */
  function _getY(bytes32 prototype) internal view returns (int32 y) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (int32(uint32(bytes4(_blob))));
  }

  /**
   * @notice Set y.
   */
  function setY(bytes32 prototype, int32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((y)), _fieldLayout);
  }

  /**
   * @notice Set y.
   */
  function _setY(bytes32 prototype, int32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((y)), _fieldLayout);
  }

  /**
   * @notice Get resources.
   */
  function getResources(bytes32 prototype) internal view returns (uint8[] memory resources) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint8());
  }

  /**
   * @notice Get resources.
   */
  function _getResources(bytes32 prototype) internal view returns (uint8[] memory resources) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 0);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint8());
  }

  /**
   * @notice Set resources.
   */
  function setResources(bytes32 prototype, uint8[] memory resources) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((resources)));
  }

  /**
   * @notice Set resources.
   */
  function _setResources(bytes32 prototype, uint8[] memory resources) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.setDynamicField(_tableId, _keyTuple, 0, EncodeArray.encode((resources)));
  }

  /**
   * @notice Get the length of resources.
   */
  function lengthResources(bytes32 prototype) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get the length of resources.
   */
  function _lengthResources(bytes32 prototype) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 0);
    unchecked {
      return _byteLength / 1;
    }
  }

  /**
   * @notice Get an item of resources.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemResources(bytes32 prototype, uint256 _index) internal view returns (uint8) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (uint8(bytes1(_blob)));
    }
  }

  /**
   * @notice Get an item of resources.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemResources(bytes32 prototype, uint256 _index) internal view returns (uint8) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 0, _index * 1, (_index + 1) * 1);
      return (uint8(bytes1(_blob)));
    }
  }

  /**
   * @notice Push an element to resources.
   */
  function pushResources(bytes32 prototype, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to resources.
   */
  function _pushResources(bytes32 prototype, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 0, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from resources.
   */
  function popResources(bytes32 prototype) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Pop an element from resources.
   */
  function _popResources(bytes32 prototype) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 0, 1);
  }

  /**
   * @notice Update an element of resources at `_index`.
   */
  function updateResources(bytes32 prototype, uint256 _index, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of resources at `_index`.
   */
  function _updateResources(bytes32 prototype, uint256 _index, uint8 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 0, uint40(_index * 1), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get resourceAmounts.
   */
  function getResourceAmounts(bytes32 prototype) internal view returns (uint256[] memory resourceAmounts) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get resourceAmounts.
   */
  function _getResourceAmounts(bytes32 prototype) internal view returns (uint256[] memory resourceAmounts) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 1);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set resourceAmounts.
   */
  function setResourceAmounts(bytes32 prototype, uint256[] memory resourceAmounts) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((resourceAmounts)));
  }

  /**
   * @notice Set resourceAmounts.
   */
  function _setResourceAmounts(bytes32 prototype, uint256[] memory resourceAmounts) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.setDynamicField(_tableId, _keyTuple, 1, EncodeArray.encode((resourceAmounts)));
  }

  /**
   * @notice Get the length of resourceAmounts.
   */
  function lengthResourceAmounts(bytes32 prototype) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of resourceAmounts.
   */
  function _lengthResourceAmounts(bytes32 prototype) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 1);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of resourceAmounts.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemResourceAmounts(bytes32 prototype, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of resourceAmounts.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemResourceAmounts(bytes32 prototype, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 1, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Push an element to resourceAmounts.
   */
  function pushResourceAmounts(bytes32 prototype, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to resourceAmounts.
   */
  function _pushResourceAmounts(bytes32 prototype, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 1, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from resourceAmounts.
   */
  function popResourceAmounts(bytes32 prototype) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Pop an element from resourceAmounts.
   */
  function _popResourceAmounts(bytes32 prototype) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 1, 32);
  }

  /**
   * @notice Update an element of resourceAmounts at `_index`.
   */
  function updateResourceAmounts(bytes32 prototype, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of resourceAmounts at `_index`.
   */
  function _updateResourceAmounts(bytes32 prototype, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 1, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get units.
   */
  function getUnits(bytes32 prototype) internal view returns (bytes32[] memory units) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 2);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /**
   * @notice Get units.
   */
  function _getUnits(bytes32 prototype) internal view returns (bytes32[] memory units) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 2);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_bytes32());
  }

  /**
   * @notice Set units.
   */
  function setUnits(bytes32 prototype, bytes32[] memory units) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 2, EncodeArray.encode((units)));
  }

  /**
   * @notice Set units.
   */
  function _setUnits(bytes32 prototype, bytes32[] memory units) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.setDynamicField(_tableId, _keyTuple, 2, EncodeArray.encode((units)));
  }

  /**
   * @notice Get the length of units.
   */
  function lengthUnits(bytes32 prototype) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of units.
   */
  function _lengthUnits(bytes32 prototype) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 2);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of units.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemUnits(bytes32 prototype, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 32, (_index + 1) * 32);
      return (bytes32(_blob));
    }
  }

  /**
   * @notice Get an item of units.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemUnits(bytes32 prototype, uint256 _index) internal view returns (bytes32) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 2, _index * 32, (_index + 1) * 32);
      return (bytes32(_blob));
    }
  }

  /**
   * @notice Push an element to units.
   */
  function pushUnits(bytes32 prototype, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 2, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to units.
   */
  function _pushUnits(bytes32 prototype, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 2, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from units.
   */
  function popUnits(bytes32 prototype) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 2, 32);
  }

  /**
   * @notice Pop an element from units.
   */
  function _popUnits(bytes32 prototype) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 2, 32);
  }

  /**
   * @notice Update an element of units at `_index`.
   */
  function updateUnits(bytes32 prototype, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of units at `_index`.
   */
  function _updateUnits(bytes32 prototype, uint256 _index, bytes32 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 2, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get unitAmounts.
   */
  function getUnitAmounts(bytes32 prototype) internal view returns (uint256[] memory unitAmounts) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    bytes memory _blob = StoreSwitch.getDynamicField(_tableId, _keyTuple, 3);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Get unitAmounts.
   */
  function _getUnitAmounts(bytes32 prototype) internal view returns (uint256[] memory unitAmounts) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    bytes memory _blob = StoreCore.getDynamicField(_tableId, _keyTuple, 3);
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_uint256());
  }

  /**
   * @notice Set unitAmounts.
   */
  function setUnitAmounts(bytes32 prototype, uint256[] memory unitAmounts) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.setDynamicField(_tableId, _keyTuple, 3, EncodeArray.encode((unitAmounts)));
  }

  /**
   * @notice Set unitAmounts.
   */
  function _setUnitAmounts(bytes32 prototype, uint256[] memory unitAmounts) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.setDynamicField(_tableId, _keyTuple, 3, EncodeArray.encode((unitAmounts)));
  }

  /**
   * @notice Get the length of unitAmounts.
   */
  function lengthUnitAmounts(bytes32 prototype) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    uint256 _byteLength = StoreSwitch.getDynamicFieldLength(_tableId, _keyTuple, 3);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get the length of unitAmounts.
   */
  function _lengthUnitAmounts(bytes32 prototype) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    uint256 _byteLength = StoreCore.getDynamicFieldLength(_tableId, _keyTuple, 3);
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * @notice Get an item of unitAmounts.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function getItemUnitAmounts(bytes32 prototype, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _blob = StoreSwitch.getDynamicFieldSlice(_tableId, _keyTuple, 3, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Get an item of unitAmounts.
   * @dev Reverts with Store_IndexOutOfBounds if `_index` is out of bounds for the array.
   */
  function _getItemUnitAmounts(bytes32 prototype, uint256 _index) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _blob = StoreCore.getDynamicFieldSlice(_tableId, _keyTuple, 3, _index * 32, (_index + 1) * 32);
      return (uint256(bytes32(_blob)));
    }
  }

  /**
   * @notice Push an element to unitAmounts.
   */
  function pushUnitAmounts(bytes32 prototype, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.pushToDynamicField(_tableId, _keyTuple, 3, abi.encodePacked((_element)));
  }

  /**
   * @notice Push an element to unitAmounts.
   */
  function _pushUnitAmounts(bytes32 prototype, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.pushToDynamicField(_tableId, _keyTuple, 3, abi.encodePacked((_element)));
  }

  /**
   * @notice Pop an element from unitAmounts.
   */
  function popUnitAmounts(bytes32 prototype) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.popFromDynamicField(_tableId, _keyTuple, 3, 32);
  }

  /**
   * @notice Pop an element from unitAmounts.
   */
  function _popUnitAmounts(bytes32 prototype) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.popFromDynamicField(_tableId, _keyTuple, 3, 32);
  }

  /**
   * @notice Update an element of unitAmounts at `_index`.
   */
  function updateUnitAmounts(bytes32 prototype, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreSwitch.spliceDynamicData(_tableId, _keyTuple, 3, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Update an element of unitAmounts at `_index`.
   */
  function _updateUnitAmounts(bytes32 prototype, uint256 _index, uint256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    unchecked {
      bytes memory _encoded = abi.encodePacked((_element));
      StoreCore.spliceDynamicData(_tableId, _keyTuple, 3, uint40(_index * 32), uint40(_encoded.length), _encoded);
    }
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 prototype) internal view returns (P_SpawnPirateAsteroidData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 prototype) internal view returns (P_SpawnPirateAsteroidData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    (bytes memory _staticData, PackedCounter _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(
    bytes32 prototype,
    int32 x,
    int32 y,
    uint8[] memory resources,
    uint256[] memory resourceAmounts,
    bytes32[] memory units,
    uint256[] memory unitAmounts
  ) internal {
    bytes memory _staticData = encodeStatic(x, y);

    PackedCounter _encodedLengths = encodeLengths(resources, resourceAmounts, units, unitAmounts);
    bytes memory _dynamicData = encodeDynamic(resources, resourceAmounts, units, unitAmounts);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(
    bytes32 prototype,
    int32 x,
    int32 y,
    uint8[] memory resources,
    uint256[] memory resourceAmounts,
    bytes32[] memory units,
    uint256[] memory unitAmounts
  ) internal {
    bytes memory _staticData = encodeStatic(x, y);

    PackedCounter _encodedLengths = encodeLengths(resources, resourceAmounts, units, unitAmounts);
    bytes memory _dynamicData = encodeDynamic(resources, resourceAmounts, units, unitAmounts);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 prototype, P_SpawnPirateAsteroidData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.x, _table.y);

    PackedCounter _encodedLengths = encodeLengths(
      _table.resources,
      _table.resourceAmounts,
      _table.units,
      _table.unitAmounts
    );
    bytes memory _dynamicData = encodeDynamic(
      _table.resources,
      _table.resourceAmounts,
      _table.units,
      _table.unitAmounts
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 prototype, P_SpawnPirateAsteroidData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.x, _table.y);

    PackedCounter _encodedLengths = encodeLengths(
      _table.resources,
      _table.resourceAmounts,
      _table.units,
      _table.unitAmounts
    );
    bytes memory _dynamicData = encodeDynamic(
      _table.resources,
      _table.resourceAmounts,
      _table.units,
      _table.unitAmounts
    );

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(bytes memory _blob) internal pure returns (int32 x, int32 y) {
    x = (int32(uint32(Bytes.slice4(_blob, 0))));

    y = (int32(uint32(Bytes.slice4(_blob, 4))));
  }

  /**
   * @notice Decode the tightly packed blob of dynamic data using the encoded lengths.
   */
  function decodeDynamic(
    PackedCounter _encodedLengths,
    bytes memory _blob
  )
    internal
    pure
    returns (
      uint8[] memory resources,
      uint256[] memory resourceAmounts,
      bytes32[] memory units,
      uint256[] memory unitAmounts
    )
  {
    uint256 _start;
    uint256 _end;
    unchecked {
      _end = _encodedLengths.atIndex(0);
    }
    resources = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint8());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(1);
    }
    resourceAmounts = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(2);
    }
    units = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_bytes32());

    _start = _end;
    unchecked {
      _end += _encodedLengths.atIndex(3);
    }
    unitAmounts = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_uint256());
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   * @param _encodedLengths Encoded lengths of dynamic fields.
   * @param _dynamicData Tightly packed dynamic fields.
   */
  function decode(
    bytes memory _staticData,
    PackedCounter _encodedLengths,
    bytes memory _dynamicData
  ) internal pure returns (P_SpawnPirateAsteroidData memory _table) {
    (_table.x, _table.y) = decodeStatic(_staticData);

    (_table.resources, _table.resourceAmounts, _table.units, _table.unitAmounts) = decodeDynamic(
      _encodedLengths,
      _dynamicData
    );
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 prototype) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 prototype) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(int32 x, int32 y) internal pure returns (bytes memory) {
    return abi.encodePacked(x, y);
  }

  /**
   * @notice Tightly pack dynamic data lengths using this table's schema.
   * @return _encodedLengths The lengths of the dynamic fields (packed into a single bytes32 value).
   */
  function encodeLengths(
    uint8[] memory resources,
    uint256[] memory resourceAmounts,
    bytes32[] memory units,
    uint256[] memory unitAmounts
  ) internal pure returns (PackedCounter _encodedLengths) {
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(
        resources.length * 1,
        resourceAmounts.length * 32,
        units.length * 32,
        unitAmounts.length * 32
      );
    }
  }

  /**
   * @notice Tightly pack dynamic (variable length) data using this table's schema.
   * @return The dynamic data, encoded into a sequence of bytes.
   */
  function encodeDynamic(
    uint8[] memory resources,
    uint256[] memory resourceAmounts,
    bytes32[] memory units,
    uint256[] memory unitAmounts
  ) internal pure returns (bytes memory) {
    return
      abi.encodePacked(
        EncodeArray.encode((resources)),
        EncodeArray.encode((resourceAmounts)),
        EncodeArray.encode((units)),
        EncodeArray.encode((unitAmounts))
      );
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dyanmic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    int32 x,
    int32 y,
    uint8[] memory resources,
    uint256[] memory resourceAmounts,
    bytes32[] memory units,
    uint256[] memory unitAmounts
  ) internal pure returns (bytes memory, PackedCounter, bytes memory) {
    bytes memory _staticData = encodeStatic(x, y);

    PackedCounter _encodedLengths = encodeLengths(resources, resourceAmounts, units, unitAmounts);
    bytes memory _dynamicData = encodeDynamic(resources, resourceAmounts, units, unitAmounts);

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 prototype) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = prototype;

    return _keyTuple;
  }
}
